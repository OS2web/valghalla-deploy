<?php
// valhalla_field_party_volunteers


function valhalla_field_party_volunteers_v4_field_info() {
  return array(
    'party_volunteers_field_v4' => array(
      'label' => t('Number of volunteers pr party v4'),
      'description' => t('Combines the party to the number of required volunteers for a specific polling station.'),
      'default_widget' => 'party_volunteers_standard_v4',
      'default_formatter' => 'party_volunteers_default_v4',
    ),
  );
}


function valhalla_field_party_volunteers_v4_field_schema() {
  $columns = array(
    'party' => array(
      'description' => 'Party reference.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
      'role_vo' => array(
      'description' => 'Number of vontrolers',
      'type' => 'varchar', 
      'not null' => TRUE,
      'length' => 128,
    ),
    'number_vo' => array(
      'description' => 'Number of vontrolers',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
    'meeting_time' => array(
      'description' => 'Number of scrutineers',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ),
  );

  return array(
    'columns' => $columns,
    // TODO Add indexes.
  );
}


function valhalla_field_party_volunteers_v4_field_widget_info() {
  $widgets = array();

  $widgets['party_volunteers_standard_v4'] = array(
    'label' => t('Volunteers to Party'),
    'field types' => array('party_volunteers_field_v4'),
    'settings' => array(
      'available_parties' => array(),
    )
  );

  return $widgets;
}


function valhalla_field_party_volunteers_v4_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['widget']['settings'];
  // $party_value = isset($items[$delta]['party']) ? $items[$delta]['party'] : '';
 // $number_va_value = isset($items[$delta]['number_va']) ? $items[$delta]['number_va'] : '0';
 // $number_ti_value = isset($items[$delta]['number_ti']) ? $items[$delta]['number_ti'] : '0';

  if ($instance['widget']['type'] == 'party_volunteers_standard_v4') {
    $options = array(0 => t('Select Party'));
    foreach (taxonomy_get_tree(1) as $item) {
      $options[$item->tid] = $item->name;
    }

   $element['party'] = array(
      '#type' => 'select',
      '#title' => t('Party'),
      '#options' => $options,
      '#default_value' => "",
    );
  $element['names_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Volunteers roles'),
   
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
    '#prefix' => '<div id="names-fieldset-wrapper">',
    '#suffix' => '</div>',
  );
  //var_dump(@$form_state['num_names']);
   if (empty($form_state['num_names'])) 
    $form_state['num_names'] = 1;
        for ($i = 0; $i < $form_state['num_names']; $i++) {
    
    //lets add all the fields we want in the set  
    /*
    We have the prefix and suffix added here, so that we can do some sort of styling with the form, like display the fields side by side. You may remove    it, but generally we need that when we have a set of fields, hence I thought to keep it here.
    */
    
    //Parent container
    $element['names_fieldset'][$i] = array(
    '#prefix' => '<p><div class="container-inline">',
    '#suffix' => '</div></p>'
    );
    
    //other form elements
    $element['names_fieldset'][$i]['role_vo'] = array(
      '#type' => 'textfield',
         '#size'  =>5,
      '#title' => t('Role'),
      
    );
         
    $element['names_fieldset'][$i]['number_vo'] = array(
      '#type' => 'textfield',
      '#size'  =>5,
      '#title' => t('Volunteers '),
      
    );  
    $element['names_fieldset'][$i]['meeting_time'] = array(
      '#type' => 'select',
       '#options'  =>array('1'=>'8:00', '2'=>'16:00', '3'=>'19:30'),
      '#title' => t('Meeting time'),
      
    );
    //-- Like wise we can add more
  }
 $element['names_fieldset']['add_name'] = array(
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => array('valhalla_field_party_volunteers_v4_add_more_add_one'),
    // See the examples in ajax_example.module for more details on the
    // properties of #ajax.
    '#ajax' => array(
      'callback' => 'valhalla_field_party_volunteers_v4_add_more_callback',
      'wrapper' => 'names-fieldset-wrapper',
    ),
  );
  
  
  /*  $element['number_va'] = array(
      '#type' => 'textfield',
      '#title' => t('VA'),
      '#size' => 5,
      '#default_value' => $number_va_value,
    );

    $element['number_ti'] = array(
      '#type' => 'textfield',
      '#title' => t('TI'),
      '#size' => 5,
      '#default_value' => $number_ti_value,
    );*/
  }
  
  return $element;
}
function valhalla_field_party_volunteers_v4_add_more_callback($form, &$form_state ) {
 
 return $form['field_test1']['und'][0]['names_fieldset'];

}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function valhalla_field_party_volunteers_v4_add_more_add_one($form, &$form_state) {
   // var_dump($form_state);
  $form_state['num_names']++;
  $form_state['rebuild'] = TRUE;
}

function valhalla_field_party_volunteers_v4_field_formatter_info() {
  return array(
    'party_volunteers_default_v4' => array(
      'label' => t('Default'),
      'field types' => array('party_volunteers_field_v4'),
    ),
  );
}


function valhalla_field_party_volunteers_v4_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'party_volunteers_default_v4':
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['party']);
      $element[$delta]['#markup'] = '<p>' . $term->name  . ': VA ' . $item['number_va'] . ' / TI ' . $item['number_ti'] . '</p>';
      }
      break;
  }

  return $element;
}


function valhalla_field_party_volunteers_v4_field_is_empty($item, $field) {
  return empty($item['party']);
}


